# PIPELINE DEFINITION
# Name: spotify-churn-training-pipeline
# Inputs:
#    data_bucket: str
#    dataset_filename: str
#    model_repo: str
#    project_id: str
components:
  comp-compare-models:
    executorLabel: exec-compare-models
    inputDefinitions:
      parameters:
        lr_metrics:
          parameterType: STRUCT
        rf_metrics:
          parameterType: STRUCT
    outputDefinitions:
      parameters:
        Output:
          parameterType: STRING
  comp-condition-1:
    dag:
      tasks:
        upload-to-gcs:
          cachingOptions:
            enableCache: true
          componentRef:
            name: comp-upload-to-gcs
          inputs:
            artifacts:
              artifact:
                componentInputArtifact: pipelinechannel--train-rf-model_out
            parameters:
              bucket_name:
                componentInputParameter: pipelinechannel--model_repo
              project_id:
                componentInputParameter: pipelinechannel--project_id
          taskInfo:
            name: upload-to-gcs
        upload-to-gcs-2:
          cachingOptions:
            enableCache: true
          componentRef:
            name: comp-upload-to-gcs-2
          inputs:
            artifacts:
              artifact:
                componentInputArtifact: pipelinechannel--preprocess-and-split-scaler_out
            parameters:
              bucket_name:
                componentInputParameter: pipelinechannel--model_repo
              project_id:
                componentInputParameter: pipelinechannel--project_id
          taskInfo:
            name: upload-to-gcs-2
    inputDefinitions:
      artifacts:
        pipelinechannel--preprocess-and-split-scaler_out:
          artifactType:
            schemaTitle: system.Model
            schemaVersion: 0.0.1
        pipelinechannel--train-rf-model_out:
          artifactType:
            schemaTitle: system.Model
            schemaVersion: 0.0.1
      parameters:
        pipelinechannel--compare-models-Output:
          parameterType: STRING
        pipelinechannel--model_repo:
          parameterType: STRING
        pipelinechannel--project_id:
          parameterType: STRING
  comp-condition-2:
    dag:
      tasks:
        upload-to-gcs-3:
          cachingOptions:
            enableCache: true
          componentRef:
            name: comp-upload-to-gcs-3
          inputs:
            artifacts:
              artifact:
                componentInputArtifact: pipelinechannel--train-lr-model_out
            parameters:
              bucket_name:
                componentInputParameter: pipelinechannel--model_repo
              project_id:
                componentInputParameter: pipelinechannel--project_id
          taskInfo:
            name: upload-to-gcs-3
        upload-to-gcs-4:
          cachingOptions:
            enableCache: true
          componentRef:
            name: comp-upload-to-gcs-4
          inputs:
            artifacts:
              artifact:
                componentInputArtifact: pipelinechannel--preprocess-and-split-scaler_out
            parameters:
              bucket_name:
                componentInputParameter: pipelinechannel--model_repo
              project_id:
                componentInputParameter: pipelinechannel--project_id
          taskInfo:
            name: upload-to-gcs-4
    inputDefinitions:
      artifacts:
        pipelinechannel--preprocess-and-split-scaler_out:
          artifactType:
            schemaTitle: system.Model
            schemaVersion: 0.0.1
        pipelinechannel--train-lr-model_out:
          artifactType:
            schemaTitle: system.Model
            schemaVersion: 0.0.1
      parameters:
        pipelinechannel--compare-models-Output:
          parameterType: STRING
        pipelinechannel--model_repo:
          parameterType: STRING
        pipelinechannel--project_id:
          parameterType: STRING
  comp-download-data:
    executorLabel: exec-download-data
    inputDefinitions:
      parameters:
        bucket:
          parameterType: STRING
        file_name:
          parameterType: STRING
        project_id:
          parameterType: STRING
    outputDefinitions:
      artifacts:
        dataset:
          artifactType:
            schemaTitle: system.Dataset
            schemaVersion: 0.0.1
  comp-predict-lr:
    executorLabel: exec-predict-lr
    inputDefinitions:
      artifacts:
        model:
          artifactType:
            schemaTitle: system.Model
            schemaVersion: 0.0.1
        test_data:
          artifactType:
            schemaTitle: system.Dataset
            schemaVersion: 0.0.1
    outputDefinitions:
      artifacts:
        predictions:
          artifactType:
            schemaTitle: system.Dataset
            schemaVersion: 0.0.1
      parameters:
        metrics:
          parameterType: STRUCT
  comp-predict-rf:
    executorLabel: exec-predict-rf
    inputDefinitions:
      artifacts:
        model:
          artifactType:
            schemaTitle: system.Model
            schemaVersion: 0.0.1
        test_data:
          artifactType:
            schemaTitle: system.Dataset
            schemaVersion: 0.0.1
    outputDefinitions:
      artifacts:
        predictions:
          artifactType:
            schemaTitle: system.Dataset
            schemaVersion: 0.0.1
      parameters:
        metrics:
          parameterType: STRUCT
  comp-preprocess-and-split:
    executorLabel: exec-preprocess-and-split
    inputDefinitions:
      artifacts:
        raw_data:
          artifactType:
            schemaTitle: system.Dataset
            schemaVersion: 0.0.1
    outputDefinitions:
      artifacts:
        scaler_out:
          artifactType:
            schemaTitle: system.Model
            schemaVersion: 0.0.1
        test_data:
          artifactType:
            schemaTitle: system.Dataset
            schemaVersion: 0.0.1
        train_data:
          artifactType:
            schemaTitle: system.Dataset
            schemaVersion: 0.0.1
  comp-train-lr:
    executorLabel: exec-train-lr
    inputDefinitions:
      artifacts:
        train_data:
          artifactType:
            schemaTitle: system.Dataset
            schemaVersion: 0.0.1
    outputDefinitions:
      artifacts:
        model_out:
          artifactType:
            schemaTitle: system.Model
            schemaVersion: 0.0.1
      parameters:
        metrics:
          parameterType: STRUCT
  comp-train-rf:
    executorLabel: exec-train-rf
    inputDefinitions:
      artifacts:
        train_data:
          artifactType:
            schemaTitle: system.Dataset
            schemaVersion: 0.0.1
    outputDefinitions:
      artifacts:
        model_out:
          artifactType:
            schemaTitle: system.Model
            schemaVersion: 0.0.1
      parameters:
        metrics:
          parameterType: STRUCT
  comp-upload-to-gcs:
    executorLabel: exec-upload-to-gcs
    inputDefinitions:
      artifacts:
        artifact:
          artifactType:
            schemaTitle: system.Model
            schemaVersion: 0.0.1
      parameters:
        bucket_name:
          parameterType: STRING
        project_id:
          parameterType: STRING
  comp-upload-to-gcs-2:
    executorLabel: exec-upload-to-gcs-2
    inputDefinitions:
      artifacts:
        artifact:
          artifactType:
            schemaTitle: system.Model
            schemaVersion: 0.0.1
      parameters:
        bucket_name:
          parameterType: STRING
        project_id:
          parameterType: STRING
  comp-upload-to-gcs-3:
    executorLabel: exec-upload-to-gcs-3
    inputDefinitions:
      artifacts:
        artifact:
          artifactType:
            schemaTitle: system.Model
            schemaVersion: 0.0.1
      parameters:
        bucket_name:
          parameterType: STRING
        project_id:
          parameterType: STRING
  comp-upload-to-gcs-4:
    executorLabel: exec-upload-to-gcs-4
    inputDefinitions:
      artifacts:
        artifact:
          artifactType:
            schemaTitle: system.Model
            schemaVersion: 0.0.1
      parameters:
        bucket_name:
          parameterType: STRING
        project_id:
          parameterType: STRING
deploymentSpec:
  executors:
    exec-compare-models:
      container:
        args:
        - --executor_input
        - '{{$}}'
        - --function_to_execute
        - compare_models
        command:
        - sh
        - -c
        - "\nif ! [ -x \"$(command -v pip)\" ]; then\n    python3 -m ensurepip ||\
          \ python3 -m ensurepip --user || apt-get install python3-pip\nfi\n\nPIP_DISABLE_PIP_VERSION_CHECK=1\
          \ python3 -m pip install --quiet --no-warn-script-location 'kfp==2.14.6'\
          \ '--no-deps' 'typing-extensions>=3.7.4,<5; python_version<\"3.9\"' && \"\
          $0\" \"$@\"\n"
        - sh
        - -ec
        - 'program_path=$(mktemp -d)


          printf "%s" "$0" > "$program_path/ephemeral_component.py"

          _KFP_RUNTIME=true python3 -m kfp.dsl.executor_main                         --component_module_path                         "$program_path/ephemeral_component.py"                         "$@"

          '
        - "\nimport kfp\nfrom kfp import dsl\nfrom kfp.dsl import *\nfrom typing import\
          \ *\n\ndef compare_models(rf_metrics: dict, lr_metrics: dict) -> str:\n\
          \    '''Compare models and select winner'''\n    import logging\n    import\
          \ sys\n\n    logging.basicConfig(stream=sys.stdout, level=logging.INFO)\n\
          \    logging.info(f\"RF Metrics: {rf_metrics}\")\n    logging.info(f\"LR\
          \ Metrics: {lr_metrics}\")\n\n    # Compare based on test F1-score\n   \
          \ rf_f1 = rf_metrics.get(\"test_f1_score\", 0)\n    lr_f1 = lr_metrics.get(\"\
          test_f1_score\", 0)\n\n    if rf_f1 > lr_f1:\n        logging.info(f\"Winner:\
          \ Random Forest (F1={rf_f1:.3f})\")\n        return \"RF\"\n    else:\n\
          \        logging.info(f\"Winner: Logistic Regression (F1={lr_f1:.3f})\"\
          )\n        return \"LR\"\n\n"
        image: python:3.10.7-slim
    exec-download-data:
      container:
        args:
        - --executor_input
        - '{{$}}'
        - --function_to_execute
        - download_data
        command:
        - sh
        - -c
        - "\nif ! [ -x \"$(command -v pip)\" ]; then\n    python3 -m ensurepip ||\
          \ python3 -m ensurepip --user || apt-get install python3-pip\nfi\n\nPIP_DISABLE_PIP_VERSION_CHECK=1\
          \ python3 -m pip install --quiet --no-warn-script-location 'pandas' 'google-cloud-storage'\
          \  &&  python3 -m pip install --quiet --no-warn-script-location 'kfp==2.14.6'\
          \ '--no-deps' 'typing-extensions>=3.7.4,<5; python_version<\"3.9\"' && \"\
          $0\" \"$@\"\n"
        - sh
        - -ec
        - 'program_path=$(mktemp -d)


          printf "%s" "$0" > "$program_path/ephemeral_component.py"

          _KFP_RUNTIME=true python3 -m kfp.dsl.executor_main                         --component_module_path                         "$program_path/ephemeral_component.py"                         "$@"

          '
        - "\nimport kfp\nfrom kfp import dsl\nfrom kfp.dsl import *\nfrom typing import\
          \ *\n\ndef download_data(project_id: str, bucket: str, file_name: str, dataset:\
          \ Output[Dataset]):\n    '''Download raw data from GCS'''\n    from google.cloud\
          \ import storage\n    import logging\n    import sys\n\n    logging.basicConfig(stream=sys.stdout,\
          \ level=logging.INFO)\n\n    client = storage.Client(project=project_id)\n\
          \    bucket = client.bucket(bucket)\n    blob = bucket.blob(file_name)\n\
          \    blob.download_to_filename(dataset.path + \".csv\")\n    logging.info(f'Downloaded\
          \ {file_name} from gs://{bucket}/')\n\n"
        image: python:3.10.7-slim
    exec-predict-lr:
      container:
        args:
        - --executor_input
        - '{{$}}'
        - --function_to_execute
        - predict_lr
        command:
        - sh
        - -c
        - "\nif ! [ -x \"$(command -v pip)\" ]; then\n    python3 -m ensurepip ||\
          \ python3 -m ensurepip --user || apt-get install python3-pip\nfi\n\nPIP_DISABLE_PIP_VERSION_CHECK=1\
          \ python3 -m pip install --quiet --no-warn-script-location 'pandas' 'scikit-learn==1.3.2'\
          \ 'joblib'  &&  python3 -m pip install --quiet --no-warn-script-location\
          \ 'kfp==2.14.6' '--no-deps' 'typing-extensions>=3.7.4,<5; python_version<\"\
          3.9\"' && \"$0\" \"$@\"\n"
        - sh
        - -ec
        - 'program_path=$(mktemp -d)


          printf "%s" "$0" > "$program_path/ephemeral_component.py"

          _KFP_RUNTIME=true python3 -m kfp.dsl.executor_main                         --component_module_path                         "$program_path/ephemeral_component.py"                         "$@"

          '
        - "\nimport kfp\nfrom kfp import dsl\nfrom kfp.dsl import *\nfrom typing import\
          \ *\n\ndef predict_lr(\n    model: Input[Model],\n    test_data: Input[Dataset],\n\
          \    predictions: Output[Dataset]\n) -> NamedTuple('outputs', metrics=dict):\n\
          \    '''Make predictions with LR and evaluate'''\n    import pandas as pd\n\
          \    import joblib\n    from sklearn.metrics import accuracy_score, f1_score,\
          \ classification_report\n    import logging\n    import sys\n\n    logging.basicConfig(stream=sys.stdout,\
          \ level=logging.INFO)\n\n    # Load test data\n    df_test = pd.read_csv(test_data.path\
          \ + \".csv\")\n    X_test = df_test.drop(columns=[\"is_churned\"])\n   \
          \ y_test = df_test[\"is_churned\"]\n\n    # Load model\n    model_lr = joblib.load(model.path\
          \ + \".pkl\")\n\n    # Predict\n    y_pred = model_lr.predict(X_test)\n\n\
          \    # Metrics\n    accuracy = accuracy_score(y_test, y_pred)\n    f1 =\
          \ f1_score(y_test, y_pred)\n\n    metrics_dict = {\n        \"test_accuracy\"\
          : float(accuracy),\n        \"test_f1_score\": float(f1)\n    }\n    logging.info(f\"\
          LR Test Metrics: {metrics_dict}\")\n    logging.info(f\"\\n{classification_report(y_test,\
          \ y_pred)}\")\n\n    # Save predictions\n    result_df = df_test.copy()\n\
          \    result_df['prediction'] = y_pred\n    result_df.to_csv(predictions.path\
          \ + \".csv\", index=False)\n\n    outputs = NamedTuple('outputs', metrics=dict)\n\
          \    return outputs(metrics_dict)\n\n"
        image: python:3.10.7-slim
    exec-predict-rf:
      container:
        args:
        - --executor_input
        - '{{$}}'
        - --function_to_execute
        - predict_rf
        command:
        - sh
        - -c
        - "\nif ! [ -x \"$(command -v pip)\" ]; then\n    python3 -m ensurepip ||\
          \ python3 -m ensurepip --user || apt-get install python3-pip\nfi\n\nPIP_DISABLE_PIP_VERSION_CHECK=1\
          \ python3 -m pip install --quiet --no-warn-script-location 'pandas' 'scikit-learn==1.3.2'\
          \ 'joblib'  &&  python3 -m pip install --quiet --no-warn-script-location\
          \ 'kfp==2.14.6' '--no-deps' 'typing-extensions>=3.7.4,<5; python_version<\"\
          3.9\"' && \"$0\" \"$@\"\n"
        - sh
        - -ec
        - 'program_path=$(mktemp -d)


          printf "%s" "$0" > "$program_path/ephemeral_component.py"

          _KFP_RUNTIME=true python3 -m kfp.dsl.executor_main                         --component_module_path                         "$program_path/ephemeral_component.py"                         "$@"

          '
        - "\nimport kfp\nfrom kfp import dsl\nfrom kfp.dsl import *\nfrom typing import\
          \ *\n\ndef predict_rf(\n    model: Input[Model],\n    test_data: Input[Dataset],\n\
          \    predictions: Output[Dataset]\n) -> NamedTuple('outputs', metrics=dict):\n\
          \    '''Make predictions with RF and evaluate'''\n    import pandas as pd\n\
          \    import joblib\n    from sklearn.metrics import accuracy_score, f1_score,\
          \ classification_report\n    import logging\n    import sys\n\n    logging.basicConfig(stream=sys.stdout,\
          \ level=logging.INFO)\n\n    # Load test data\n    df_test = pd.read_csv(test_data.path\
          \ + \".csv\")\n    X_test = df_test.drop(columns=[\"is_churned\"])\n   \
          \ y_test = df_test[\"is_churned\"]\n\n    # Load model\n    model_rf = joblib.load(model.path\
          \ + \".pkl\")\n\n    # Predict\n    y_pred = model_rf.predict(X_test)\n\n\
          \    # Metrics\n    accuracy = accuracy_score(y_test, y_pred)\n    f1 =\
          \ f1_score(y_test, y_pred)\n\n    metrics_dict = {\n        \"test_accuracy\"\
          : float(accuracy),\n        \"test_f1_score\": float(f1)\n    }\n    logging.info(f\"\
          RF Test Metrics: {metrics_dict}\")\n    logging.info(f\"\\n{classification_report(y_test,\
          \ y_pred)}\")\n\n    # Save predictions\n    result_df = df_test.copy()\n\
          \    result_df['prediction'] = y_pred\n    result_df.to_csv(predictions.path\
          \ + \".csv\", index=False)\n\n    outputs = NamedTuple('outputs', metrics=dict)\n\
          \    return outputs(metrics_dict)\n\n"
        image: python:3.10.7-slim
    exec-preprocess-and-split:
      container:
        args:
        - --executor_input
        - '{{$}}'
        - --function_to_execute
        - preprocess_and_split
        command:
        - sh
        - -c
        - "\nif ! [ -x \"$(command -v pip)\" ]; then\n    python3 -m ensurepip ||\
          \ python3 -m ensurepip --user || apt-get install python3-pip\nfi\n\nPIP_DISABLE_PIP_VERSION_CHECK=1\
          \ python3 -m pip install --quiet --no-warn-script-location 'pandas' 'scikit-learn==1.3.2'\
          \ 'joblib'  &&  python3 -m pip install --quiet --no-warn-script-location\
          \ 'kfp==2.14.6' '--no-deps' 'typing-extensions>=3.7.4,<5; python_version<\"\
          3.9\"' && \"$0\" \"$@\"\n"
        - sh
        - -ec
        - 'program_path=$(mktemp -d)


          printf "%s" "$0" > "$program_path/ephemeral_component.py"

          _KFP_RUNTIME=true python3 -m kfp.dsl.executor_main                         --component_module_path                         "$program_path/ephemeral_component.py"                         "$@"

          '
        - "\nimport kfp\nfrom kfp import dsl\nfrom kfp.dsl import *\nfrom typing import\
          \ *\n\ndef preprocess_and_split(\n    raw_data: Input[Dataset],\n    train_data:\
          \ Output[Dataset],\n    test_data: Output[Dataset],\n    scaler_out: Output[Model]\n\
          ):\n    '''Preprocess data and split into train/test sets'''\n    import\
          \ pandas as pd\n    from sklearn.model_selection import train_test_split\n\
          \    from sklearn.preprocessing import StandardScaler\n    import joblib\n\
          \    import logging\n    import sys\n\n    logging.basicConfig(stream=sys.stdout,\
          \ level=logging.INFO)\n\n    # 1. Load raw data\n    df_raw = pd.read_csv(raw_data.path\
          \ + \".csv\")\n    logging.info(f\"Raw data loaded: {df_raw.shape}\")\n\n\
          \    # 2. Drop unnecessary columns\n    drop_cols = [\"user_id\", \"offline_listening\"\
          ]\n    df_model = df_raw.drop(columns=[c for c in drop_cols if c in df_raw.columns])\n\
          \n    # 3. Select only numerical features\n    selected_features = [\n \
          \       \"age\",\n        \"listening_time\",\n        \"songs_played_per_day\"\
          ,\n        \"skip_rate\",\n        \"ads_listened_per_week\"\n    ]\n  \
          \  target_col = \"is_churned\"\n\n    X = df_model[selected_features]\n\
          \    y = df_model[target_col]\n\n    # 4. Train/Test Split (80/20)\n   \
          \ X_train, X_test, y_train, y_test = train_test_split(\n        X, y, test_size=0.2,\
          \ random_state=42, stratify=y\n    )\n    logging.info(f\"Train size: {X_train.shape},\
          \ Test size: {X_test.shape}\")\n\n    # 5. Fit scaler on training data only\n\
          \    scaler = StandardScaler()\n    X_train_scaled = pd.DataFrame(\n   \
          \     scaler.fit_transform(X_train),\n        columns=selected_features\n\
          \    )\n    X_test_scaled = pd.DataFrame(\n        scaler.transform(X_test),\n\
          \        columns=selected_features\n    )\n\n    # 6. Save train data\n\
          \    train_df = X_train_scaled.copy()\n    train_df[target_col] = y_train.values\n\
          \    train_df.to_csv(train_data.path + \".csv\", index=False)\n    logging.info(\"\
          Train data saved\")\n\n    # 7. Save test data\n    test_df = X_test_scaled.copy()\n\
          \    test_df[target_col] = y_test.values\n    test_df.to_csv(test_data.path\
          \ + \".csv\", index=False)\n    logging.info(\"Test data saved\")\n\n  \
          \  # 8. Save scaler\n    scaler_out.metadata[\"file_type\"] = \".pkl\"\n\
          \    scaler_out.metadata[\"algo\"] = \"scaler\"\n    joblib.dump(scaler,\
          \ scaler_out.path + \".pkl\")\n    logging.info(\"Scaler saved\")\n\n"
        image: python:3.10.7-slim
    exec-train-lr:
      container:
        args:
        - --executor_input
        - '{{$}}'
        - --function_to_execute
        - train_lr
        command:
        - sh
        - -c
        - "\nif ! [ -x \"$(command -v pip)\" ]; then\n    python3 -m ensurepip ||\
          \ python3 -m ensurepip --user || apt-get install python3-pip\nfi\n\nPIP_DISABLE_PIP_VERSION_CHECK=1\
          \ python3 -m pip install --quiet --no-warn-script-location 'pandas' 'scikit-learn==1.3.2'\
          \ 'joblib'  &&  python3 -m pip install --quiet --no-warn-script-location\
          \ 'kfp==2.14.6' '--no-deps' 'typing-extensions>=3.7.4,<5; python_version<\"\
          3.9\"' && \"$0\" \"$@\"\n"
        - sh
        - -ec
        - 'program_path=$(mktemp -d)


          printf "%s" "$0" > "$program_path/ephemeral_component.py"

          _KFP_RUNTIME=true python3 -m kfp.dsl.executor_main                         --component_module_path                         "$program_path/ephemeral_component.py"                         "$@"

          '
        - "\nimport kfp\nfrom kfp import dsl\nfrom kfp.dsl import *\nfrom typing import\
          \ *\n\ndef train_lr(\n    train_data: Input[Dataset],\n    model_out: Output[Model]\n\
          ) -> NamedTuple('outputs', metrics=dict):\n    '''Train Logistic Regression\
          \ model'''\n    import pandas as pd\n    from sklearn.linear_model import\
          \ LogisticRegression\n    from sklearn.metrics import accuracy_score, f1_score\n\
          \    import joblib\n    import logging\n    import sys\n\n    logging.basicConfig(stream=sys.stdout,\
          \ level=logging.INFO)\n\n    # Load train data\n    df_train = pd.read_csv(train_data.path\
          \ + \".csv\")\n    X_train = df_train.drop(columns=[\"is_churned\"])\n \
          \   y_train = df_train[\"is_churned\"]\n\n    logging.info(f\"Training LR\
          \ on {X_train.shape[0]} samples\")\n\n    # Train model\n    model = LogisticRegression(max_iter=500,\
          \ class_weight=\"balanced\")\n    model.fit(X_train, y_train)\n\n    # Evaluate\
          \ on training data (for comparison)\n    y_pred = model.predict(X_train)\n\
          \    train_accuracy = accuracy_score(y_train, y_pred)\n    train_f1 = f1_score(y_train,\
          \ y_pred)\n\n    metrics_dict = {\n        \"train_accuracy\": float(train_accuracy),\n\
          \        \"train_f1_score\": float(train_f1)\n    }\n    logging.info(f\"\
          LR Training Metrics: {metrics_dict}\")\n\n    # Save model\n    model_out.metadata[\"\
          file_type\"] = \".pkl\"\n    model_out.metadata[\"algo\"] = \"best_model\"\
          \n    joblib.dump(model, model_out.path + \".pkl\")\n\n    outputs = NamedTuple('outputs',\
          \ metrics=dict)\n    return outputs(metrics_dict)\n\n"
        image: python:3.10.7-slim
    exec-train-rf:
      container:
        args:
        - --executor_input
        - '{{$}}'
        - --function_to_execute
        - train_rf
        command:
        - sh
        - -c
        - "\nif ! [ -x \"$(command -v pip)\" ]; then\n    python3 -m ensurepip ||\
          \ python3 -m ensurepip --user || apt-get install python3-pip\nfi\n\nPIP_DISABLE_PIP_VERSION_CHECK=1\
          \ python3 -m pip install --quiet --no-warn-script-location 'pandas' 'scikit-learn==1.3.2'\
          \ 'joblib'  &&  python3 -m pip install --quiet --no-warn-script-location\
          \ 'kfp==2.14.6' '--no-deps' 'typing-extensions>=3.7.4,<5; python_version<\"\
          3.9\"' && \"$0\" \"$@\"\n"
        - sh
        - -ec
        - 'program_path=$(mktemp -d)


          printf "%s" "$0" > "$program_path/ephemeral_component.py"

          _KFP_RUNTIME=true python3 -m kfp.dsl.executor_main                         --component_module_path                         "$program_path/ephemeral_component.py"                         "$@"

          '
        - "\nimport kfp\nfrom kfp import dsl\nfrom kfp.dsl import *\nfrom typing import\
          \ *\n\ndef train_rf(\n    train_data: Input[Dataset],\n    model_out: Output[Model]\n\
          ) -> NamedTuple('outputs', metrics=dict):\n    '''Train Random Forest model'''\n\
          \    import pandas as pd\n    from sklearn.ensemble import RandomForestClassifier\n\
          \    from sklearn.metrics import accuracy_score, f1_score\n    import joblib\n\
          \    import logging\n    import sys\n\n    logging.basicConfig(stream=sys.stdout,\
          \ level=logging.INFO)\n\n    # Load train data\n    df_train = pd.read_csv(train_data.path\
          \ + \".csv\")\n    X_train = df_train.drop(columns=[\"is_churned\"])\n \
          \   y_train = df_train[\"is_churned\"]\n\n    logging.info(f\"Training RF\
          \ on {X_train.shape[0]} samples\")\n\n    # Train model\n    model = RandomForestClassifier(n_estimators=100,\
          \ random_state=42)\n    model.fit(X_train, y_train)\n\n    # Evaluate on\
          \ training data (for comparison)\n    y_pred = model.predict(X_train)\n\
          \    train_accuracy = accuracy_score(y_train, y_pred)\n    train_f1 = f1_score(y_train,\
          \ y_pred)\n\n    metrics_dict = {\n        \"train_accuracy\": float(train_accuracy),\n\
          \        \"train_f1_score\": float(train_f1)\n    }\n    logging.info(f\"\
          RF Training Metrics: {metrics_dict}\")\n\n    # Save model\n    model_out.metadata[\"\
          file_type\"] = \".pkl\"\n    model_out.metadata[\"algo\"] = \"best_model\"\
          \n    joblib.dump(model, model_out.path + \".pkl\")\n\n    outputs = NamedTuple('outputs',\
          \ metrics=dict)\n    return outputs(metrics_dict)\n\n"
        image: python:3.10.7-slim
    exec-upload-to-gcs:
      container:
        args:
        - --executor_input
        - '{{$}}'
        - --function_to_execute
        - upload_to_gcs
        command:
        - sh
        - -c
        - "\nif ! [ -x \"$(command -v pip)\" ]; then\n    python3 -m ensurepip ||\
          \ python3 -m ensurepip --user || apt-get install python3-pip\nfi\n\nPIP_DISABLE_PIP_VERSION_CHECK=1\
          \ python3 -m pip install --quiet --no-warn-script-location 'google-cloud-storage'\
          \  &&  python3 -m pip install --quiet --no-warn-script-location 'kfp==2.14.6'\
          \ '--no-deps' 'typing-extensions>=3.7.4,<5; python_version<\"3.9\"' && \"\
          $0\" \"$@\"\n"
        - sh
        - -ec
        - 'program_path=$(mktemp -d)


          printf "%s" "$0" > "$program_path/ephemeral_component.py"

          _KFP_RUNTIME=true python3 -m kfp.dsl.executor_main                         --component_module_path                         "$program_path/ephemeral_component.py"                         "$@"

          '
        - "\nimport kfp\nfrom kfp import dsl\nfrom kfp.dsl import *\nfrom typing import\
          \ *\n\ndef upload_to_gcs(project_id: str, bucket_name: str, artifact: Input[Model]):\n\
          \    '''Upload artifact to GCS'''\n    from google.cloud import storage\n\
          \    import logging\n    import sys\n\n    logging.basicConfig(stream=sys.stdout,\
          \ level=logging.INFO)\n\n    client = storage.Client(project=project_id)\n\
          \    bucket = client.bucket(bucket_name)\n\n    file_name = artifact.metadata[\"\
          algo\"] + artifact.metadata[\"file_type\"]\n    blob = bucket.blob(file_name)\n\
          \    blob.upload_from_filename(artifact.path + artifact.metadata[\"file_type\"\
          ])\n\n    logging.info(f\"\u2705 Uploaded {file_name} to gs://{bucket_name}/\"\
          )\n\n"
        image: python:3.10.7-slim
    exec-upload-to-gcs-2:
      container:
        args:
        - --executor_input
        - '{{$}}'
        - --function_to_execute
        - upload_to_gcs
        command:
        - sh
        - -c
        - "\nif ! [ -x \"$(command -v pip)\" ]; then\n    python3 -m ensurepip ||\
          \ python3 -m ensurepip --user || apt-get install python3-pip\nfi\n\nPIP_DISABLE_PIP_VERSION_CHECK=1\
          \ python3 -m pip install --quiet --no-warn-script-location 'google-cloud-storage'\
          \  &&  python3 -m pip install --quiet --no-warn-script-location 'kfp==2.14.6'\
          \ '--no-deps' 'typing-extensions>=3.7.4,<5; python_version<\"3.9\"' && \"\
          $0\" \"$@\"\n"
        - sh
        - -ec
        - 'program_path=$(mktemp -d)


          printf "%s" "$0" > "$program_path/ephemeral_component.py"

          _KFP_RUNTIME=true python3 -m kfp.dsl.executor_main                         --component_module_path                         "$program_path/ephemeral_component.py"                         "$@"

          '
        - "\nimport kfp\nfrom kfp import dsl\nfrom kfp.dsl import *\nfrom typing import\
          \ *\n\ndef upload_to_gcs(project_id: str, bucket_name: str, artifact: Input[Model]):\n\
          \    '''Upload artifact to GCS'''\n    from google.cloud import storage\n\
          \    import logging\n    import sys\n\n    logging.basicConfig(stream=sys.stdout,\
          \ level=logging.INFO)\n\n    client = storage.Client(project=project_id)\n\
          \    bucket = client.bucket(bucket_name)\n\n    file_name = artifact.metadata[\"\
          algo\"] + artifact.metadata[\"file_type\"]\n    blob = bucket.blob(file_name)\n\
          \    blob.upload_from_filename(artifact.path + artifact.metadata[\"file_type\"\
          ])\n\n    logging.info(f\"\u2705 Uploaded {file_name} to gs://{bucket_name}/\"\
          )\n\n"
        image: python:3.10.7-slim
    exec-upload-to-gcs-3:
      container:
        args:
        - --executor_input
        - '{{$}}'
        - --function_to_execute
        - upload_to_gcs
        command:
        - sh
        - -c
        - "\nif ! [ -x \"$(command -v pip)\" ]; then\n    python3 -m ensurepip ||\
          \ python3 -m ensurepip --user || apt-get install python3-pip\nfi\n\nPIP_DISABLE_PIP_VERSION_CHECK=1\
          \ python3 -m pip install --quiet --no-warn-script-location 'google-cloud-storage'\
          \  &&  python3 -m pip install --quiet --no-warn-script-location 'kfp==2.14.6'\
          \ '--no-deps' 'typing-extensions>=3.7.4,<5; python_version<\"3.9\"' && \"\
          $0\" \"$@\"\n"
        - sh
        - -ec
        - 'program_path=$(mktemp -d)


          printf "%s" "$0" > "$program_path/ephemeral_component.py"

          _KFP_RUNTIME=true python3 -m kfp.dsl.executor_main                         --component_module_path                         "$program_path/ephemeral_component.py"                         "$@"

          '
        - "\nimport kfp\nfrom kfp import dsl\nfrom kfp.dsl import *\nfrom typing import\
          \ *\n\ndef upload_to_gcs(project_id: str, bucket_name: str, artifact: Input[Model]):\n\
          \    '''Upload artifact to GCS'''\n    from google.cloud import storage\n\
          \    import logging\n    import sys\n\n    logging.basicConfig(stream=sys.stdout,\
          \ level=logging.INFO)\n\n    client = storage.Client(project=project_id)\n\
          \    bucket = client.bucket(bucket_name)\n\n    file_name = artifact.metadata[\"\
          algo\"] + artifact.metadata[\"file_type\"]\n    blob = bucket.blob(file_name)\n\
          \    blob.upload_from_filename(artifact.path + artifact.metadata[\"file_type\"\
          ])\n\n    logging.info(f\"\u2705 Uploaded {file_name} to gs://{bucket_name}/\"\
          )\n\n"
        image: python:3.10.7-slim
    exec-upload-to-gcs-4:
      container:
        args:
        - --executor_input
        - '{{$}}'
        - --function_to_execute
        - upload_to_gcs
        command:
        - sh
        - -c
        - "\nif ! [ -x \"$(command -v pip)\" ]; then\n    python3 -m ensurepip ||\
          \ python3 -m ensurepip --user || apt-get install python3-pip\nfi\n\nPIP_DISABLE_PIP_VERSION_CHECK=1\
          \ python3 -m pip install --quiet --no-warn-script-location 'google-cloud-storage'\
          \  &&  python3 -m pip install --quiet --no-warn-script-location 'kfp==2.14.6'\
          \ '--no-deps' 'typing-extensions>=3.7.4,<5; python_version<\"3.9\"' && \"\
          $0\" \"$@\"\n"
        - sh
        - -ec
        - 'program_path=$(mktemp -d)


          printf "%s" "$0" > "$program_path/ephemeral_component.py"

          _KFP_RUNTIME=true python3 -m kfp.dsl.executor_main                         --component_module_path                         "$program_path/ephemeral_component.py"                         "$@"

          '
        - "\nimport kfp\nfrom kfp import dsl\nfrom kfp.dsl import *\nfrom typing import\
          \ *\n\ndef upload_to_gcs(project_id: str, bucket_name: str, artifact: Input[Model]):\n\
          \    '''Upload artifact to GCS'''\n    from google.cloud import storage\n\
          \    import logging\n    import sys\n\n    logging.basicConfig(stream=sys.stdout,\
          \ level=logging.INFO)\n\n    client = storage.Client(project=project_id)\n\
          \    bucket = client.bucket(bucket_name)\n\n    file_name = artifact.metadata[\"\
          algo\"] + artifact.metadata[\"file_type\"]\n    blob = bucket.blob(file_name)\n\
          \    blob.upload_from_filename(artifact.path + artifact.metadata[\"file_type\"\
          ])\n\n    logging.info(f\"\u2705 Uploaded {file_name} to gs://{bucket_name}/\"\
          )\n\n"
        image: python:3.10.7-slim
pipelineInfo:
  name: spotify-churn-training-pipeline
root:
  dag:
    tasks:
      compare-models:
        cachingOptions:
          enableCache: true
        componentRef:
          name: comp-compare-models
        dependentTasks:
        - predict-lr
        - predict-rf
        inputs:
          parameters:
            lr_metrics:
              taskOutputParameter:
                outputParameterKey: metrics
                producerTask: predict-lr
            rf_metrics:
              taskOutputParameter:
                outputParameterKey: metrics
                producerTask: predict-rf
        taskInfo:
          name: compare-models
      condition-1:
        componentRef:
          name: comp-condition-1
        dependentTasks:
        - compare-models
        - preprocess-and-split
        - train-rf
        inputs:
          artifacts:
            pipelinechannel--preprocess-and-split-scaler_out:
              taskOutputArtifact:
                outputArtifactKey: scaler_out
                producerTask: preprocess-and-split
            pipelinechannel--train-rf-model_out:
              taskOutputArtifact:
                outputArtifactKey: model_out
                producerTask: train-rf
          parameters:
            pipelinechannel--compare-models-Output:
              taskOutputParameter:
                outputParameterKey: Output
                producerTask: compare-models
            pipelinechannel--model_repo:
              componentInputParameter: model_repo
            pipelinechannel--project_id:
              componentInputParameter: project_id
        taskInfo:
          name: condition-1
        triggerPolicy:
          condition: inputs.parameter_values['pipelinechannel--compare-models-Output']
            == 'RF'
      condition-2:
        componentRef:
          name: comp-condition-2
        dependentTasks:
        - compare-models
        - preprocess-and-split
        - train-lr
        inputs:
          artifacts:
            pipelinechannel--preprocess-and-split-scaler_out:
              taskOutputArtifact:
                outputArtifactKey: scaler_out
                producerTask: preprocess-and-split
            pipelinechannel--train-lr-model_out:
              taskOutputArtifact:
                outputArtifactKey: model_out
                producerTask: train-lr
          parameters:
            pipelinechannel--compare-models-Output:
              taskOutputParameter:
                outputParameterKey: Output
                producerTask: compare-models
            pipelinechannel--model_repo:
              componentInputParameter: model_repo
            pipelinechannel--project_id:
              componentInputParameter: project_id
        taskInfo:
          name: condition-2
        triggerPolicy:
          condition: inputs.parameter_values['pipelinechannel--compare-models-Output']
            == 'LR'
      download-data:
        cachingOptions:
          enableCache: true
        componentRef:
          name: comp-download-data
        inputs:
          parameters:
            bucket:
              componentInputParameter: data_bucket
            file_name:
              componentInputParameter: dataset_filename
            project_id:
              componentInputParameter: project_id
        taskInfo:
          name: download-data
      predict-lr:
        cachingOptions:
          enableCache: true
        componentRef:
          name: comp-predict-lr
        dependentTasks:
        - preprocess-and-split
        - train-lr
        inputs:
          artifacts:
            model:
              taskOutputArtifact:
                outputArtifactKey: model_out
                producerTask: train-lr
            test_data:
              taskOutputArtifact:
                outputArtifactKey: test_data
                producerTask: preprocess-and-split
        taskInfo:
          name: predict-lr
      predict-rf:
        cachingOptions:
          enableCache: true
        componentRef:
          name: comp-predict-rf
        dependentTasks:
        - preprocess-and-split
        - train-rf
        inputs:
          artifacts:
            model:
              taskOutputArtifact:
                outputArtifactKey: model_out
                producerTask: train-rf
            test_data:
              taskOutputArtifact:
                outputArtifactKey: test_data
                producerTask: preprocess-and-split
        taskInfo:
          name: predict-rf
      preprocess-and-split:
        cachingOptions:
          enableCache: true
        componentRef:
          name: comp-preprocess-and-split
        dependentTasks:
        - download-data
        inputs:
          artifacts:
            raw_data:
              taskOutputArtifact:
                outputArtifactKey: dataset
                producerTask: download-data
        taskInfo:
          name: preprocess-and-split
      train-lr:
        cachingOptions:
          enableCache: true
        componentRef:
          name: comp-train-lr
        dependentTasks:
        - preprocess-and-split
        inputs:
          artifacts:
            train_data:
              taskOutputArtifact:
                outputArtifactKey: train_data
                producerTask: preprocess-and-split
        taskInfo:
          name: train-lr
      train-rf:
        cachingOptions:
          enableCache: true
        componentRef:
          name: comp-train-rf
        dependentTasks:
        - preprocess-and-split
        inputs:
          artifacts:
            train_data:
              taskOutputArtifact:
                outputArtifactKey: train_data
                producerTask: preprocess-and-split
        taskInfo:
          name: train-rf
  inputDefinitions:
    parameters:
      data_bucket:
        parameterType: STRING
      dataset_filename:
        parameterType: STRING
      model_repo:
        parameterType: STRING
      project_id:
        parameterType: STRING
schemaVersion: 2.1.0
sdkVersion: kfp-2.14.6
